
var em={devData:{},warnErrDialogSerial:false,colorPickerInit:false,capacityAhParamInit:false};em.initBmsUpdateRestart=function(){devManager.sendDevMessage({instrExt:"executeUpdateRestart",instrData:"1",instrDataExt:"1"},function(a,b){mainUtils.showInfoMessage()(b,"Restart  success: "+b)},function(b,a){mainUtils.showErrorMessage(a,"Can not mark BMSEM prod Complete. Reason: "+a)},function(){mainUtils.showErrorMessage("Can not mark BMSEM prod Complete. Reason: TIMEOUT")})};em.initBmsUpdate=function(){devManager.sendDevMessage({instrExt:"updateBegin",instrData:"4098",instrDataExt:"0"},function(a,b){mainUtils.showInfoMessage(b,"Update init success: "+b)},function(b,a){mainUtils.showErrorMessage(a,"Can not mark BMSEM prod Complete. Reason: "+a)},function(){mainUtils.showErrorMessage("Can not mark BMSEM prod Complete. Reason: TIMEOUT")})};em.updateData=function(h,g){try{if(g.updateProgress===101){mainUtils.setHtmlText("updateProgress","Ready")}else{mainUtils.setHtmlText("updateProgress",g.updateProgress+"%")}PF("pbBmsEmUpdate").setValue(g.updateProgress)}catch(j){}var k=h.getParam().ratedVoltageV||0;var b=h.getParam().ratedDischargeCurrentC||0;var c=h.getParam().ratedChargeCurrentC||0;var f=h.getParam().ratedCapacityAh||0;var a=em.getProtStateText(g.mainProtectionStatus);if(g.balansingStatus>0){setText("balancingStat","Cell: "+((g.balansingStatus&127)+1))}else{setText("balancingStat","Not active")}setText("chargeCtrl",g.chargeControl);setText("dischargeCtrl",g.dischargeControl);setText("state",a);setText("voltageV",g.voltageV.toFixed(3));setText("currentA",g.currentA.toFixed(2));if(g.currentA>0){if(g.remChargeTime!==0){setText("remTime",moment.duration(g.remChargeTime,"seconds").humanize(true))}else{setText("remTime","---")}setText("remainingTimeLable","Complete charge:");setText("powerW",((g.voltageV*g.currentA)/1000).toFixed(2)+" / "+((k*(f*c))/1000).toFixed(2))}else{if(g.remDischargeTime!==0){setText("remTime",moment.duration(g.remDischargeTime*1,"seconds").humanize(true))}else{setText("remTime","---")}setText("remainingTimeLable","Complete discharge:");setText("powerW",((g.voltageV*g.currentA)/1000).toFixed(2)+"kW /"+((k*(f*b))/1000).toFixed(2)+"kW")}setText("capacityP",g.capacityP.toFixed(0));setText("capacityAhData",g.capacityAh.toFixed(2));setText("energyWh",((g.capacityAh*k)/1000).toFixed(3)+" / "+((f*k)/1000).toFixed(3));setText("relayStatus",g.mainRelayStatus===0?"Off":"On");setText("tempGlobal",g.temp0);if(g.chargeCounter>0&&g.dischargeCounter>0){setText("cycle",(((g.chargeCounter+g.dischargeCounter)/2)/f).toFixed(1))}else{setText("cycle","0")}setText("tempGlobal",g.temp0+"Â°C");setText("minCellV",(g.minCellValue/1000).toFixed(3)+"V @ cell"+(g.minCellNumber+1));setText("maxCellV",(g.maxCellValue/1000).toFixed(3)+"V @ cell"+(g.maxCellNumber+1));setText("cellVoltageDiff",(g.maxCellValue-g.minCellValue)+"mV");for(var d=0;d<g.cellVoltageVArr.length;d++){setText("cellVoltageVArr"+(d+1),g.cellVoltageVArr[d].toFixed(3))}setText("maxChargeCurrent",(g.maxChargeCurrent/1000).toFixed(2));setText("maxDischargeCurrent",(g.maxDischargeCurrent/1000).toFixed(2));setText("maxChargeCurrentDuration",g.maxChargeCurrentDuration);setText("maxDischargeCurrentDuration",g.maxDischargeCurrentDuration);if(h.paramLoaded===true){if(h.capacityAhInit===undefined){h.capacityAhInit=true;mainUtils.setWidgetValue("capacityAh",g.capacityAh);devManager.onParamChange("capacityAh")}}};em.updateParam=function(a,f){if(em.colorPickerInit===false){em.colorPickerInit=true;mainUtils.addColorpickerCallback("ledButtonStaticValue",em.onColorPickerChange)}if(f===undefined){return}mainUtils.setHtmlText("firmware",a.fwVer);mainUtils.setHtmlText("batName",a.deviceName);mainUtils.setHtmlText("batModel",em.subModelName(a.subModelID));setText("cellModelLabel",f.cellModel);setText("cellManufacturerLabel",f.cellManufacturer);setText("manufacturingDateLabel",moment(f.manufacturingDate).format("DD-MM-YYYY hh:mm"));setText("storageNameLabel ",f.storageName);setText("ratedCapacityLabel ",(f.ratedCapacityAh).toFixed(1)+"Ah / "+(f.ratedVoltageV*f.ratedCapacityAh).toFixed(1)+"Wh");setText("ratedVoltageVLabel ",(f.ratedVoltageV).toFixed(1)+"V");var b=((f.ratedChargeCurrentC*f.ratedCapacityAh)).toFixed(0);var e=((f.ratedVoltageV*Number(b))/1000).toFixed(2);setText("ratedChargeLabel ",e+"kW / "+b+"A ("+f.ratedChargeCurrentC.toFixed(2)+"C)");var d=((f.ratedDischargeCurrentC*f.ratedCapacityAh)).toFixed(0);var c=((f.ratedVoltageV*Number(d))/1000).toFixed(2);setText("ratedDischargeLabel ",c+"kW / "+d+"A ("+f.ratedDischargeCurrentC.toFixed(2)+"C)");a.paramLoaded=true};em.onColorPickerChange=function(c,a,b){devManager.onParamChange(b)};devManager.onSelectedDataReceived(em.updateData);devManager.onSelectedParamInit(em.updateParam);devManager.onSelectedChange(function(b){var a=document.querySelector(".devTbPanel-"+b.serialNumber+" img");mainUtils.initCanvas("bmsEmInfoIcon",a,280,280);em.updateParam(b,b.getParam());if(b.connected){em.updateData(b,b.getData());em.updateParam(b,b.getParam())}else{setText("dataValues")}});devManager.onSelectedStatusChange(function(a,b){if(b&&a.getData()!==undefined){em.updateData(a,a.getData());em.updateParam(a,a.getParam())}else{setText("dataValues")}});$(document).ready(function(){});var setText=function(a,b){if(b){$("."+a).text(b)}else{$("."+a).text("N/A")}};em.getProtStateText=function(a){if(a===undefined){return"N/A"}switch(a){case 0:return"Normal";case 1:return"Sleep High";case 2:return"Sleep Low";case 3:return"Awake Low";case 4:return"Override On";case 5:return"Override Off";case 6:return"Emergency Off";case 7:return"Init";case 8:return"Awake High"}return"Unknown: "+a};em.loadConfigSet=function(a){};em.subModelName=function(a){if(a===undefined){return"UNKNOWN NULL"}switch(a){case 20205:case 407401&65535:return"SS4074-02";case 403701:case 403701&65535:return"SS4037-02"}return"UNKNOWN "+a};